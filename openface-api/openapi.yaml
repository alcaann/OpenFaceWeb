openapi: 3.0.3
info:
  title: OpenFace-3.0 Real-Time API
  description: |
    A streamlined, real-time facial analysis API using WebSockets, powered by OpenFace-3.0. 
    This service is designed for high-performance, low-latency analysis of video streams.

    **Primary Interaction:**
    The main way to use this API is via a WebSocket connection. Once connected, a client can stream video frames (as base64-encoded strings) and will receive JSON analysis data in real-time.

    **HTTP Endpoints:**
    A few essential HTTP endpoints are provided for health checks and single-image analysis.
  version: 3.1.0
  contact:
    name: API Support
    url: https://github.com/alcaann/OpenFaceWeb
  license:
    name: MIT

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /health:
    get:
      summary: Health Check
      description: |
        Performs a health check of the API, verifying that the core components and models are loaded and available.
        Returns a status of "healthy" if the service is operational.
      tags:
        - General
      responses:
        '200':
          description: API is healthy and operational.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unavailable or unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/analyze:
    post:
      summary: Analyze a Single Image
      description: |
        Upload a single image file for facial analysis. This endpoint is useful for testing or for applications that process static images rather than video streams.
      tags:
        - Analysis
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to be analyzed.
      responses:
        '200':
          description: Successful analysis of the image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        '400':
          description: Bad request, such as a missing or invalid image file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An internal error occurred during analysis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# WebSocket Documentation (using x-asyncapi extension)
x-asyncapi:
  channels:
    /:
      subscribe:
        summary: Receive analysis results and system events.
        message:
          oneOf:
            - $ref: '#/components/messages/AnalysisResult'
            - $ref: '#/components/messages/ConnectionSuccess'
            - $ref: '#/components/messages/Error'
      publish:
        summary: Send frames for analysis.
        message:
          $ref: '#/components/messages/AnalyzeFrame'

components:
  messages:
    ConnectionSuccess:
      payload:
        type: object
        properties:
          success:
            type: boolean
            example: true
          client_id:
            type: string
            description: A unique ID for the WebSocket session.
            example: "a1b2c3d4"
          message:
            type: string
            example: "Connection successful."
    AnalyzeFrame:
      payload:
        type: object
        required:
          - image
        properties:
          image:
            type: string
            format: byte
            description: A base64-encoded string of the video frame.
    AnalysisResult:
      $ref: '#/components/schemas/AnalysisResult'
    Error:
      $ref: '#/components/schemas/Error'

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy]
        timestamp:
          type: string
          format: date-time
        models_loaded:
          type: object
          properties:
            retinaface:
              type: boolean
            mlt:
              type: boolean
    
    AnalysisResult:
      type: object
      properties:
        success:
          type: boolean
        timestamp:
          type: number
        processing_time_ms:
          type: number
        faces_detected:
          type: integer
        faces:
          type: array
          items:
            $ref: '#/components/schemas/FaceAnalysis'

    FaceAnalysis:
      type: object
      properties:
        face_id:
          type: integer
        bbox:
          type: array
          items:
            type: integer
          example: [100, 120, 250, 270]
        confidence:
          type: number
          format: float
        landmarks:
          type: array
          items:
            type: array
            items:
              type: integer
        emotion:
          type: object
          properties:
            label:
              type: string
            confidence:
              type: number
              format: float
        gaze:
          type: object
          properties:
            pitch:
              type: number
              format: float
            yaw:
              type: number
              format: float
        action_units:
          type: object
          properties:
            active:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                  intensity:
                    type: number
                    format: float

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: A description of the error.

